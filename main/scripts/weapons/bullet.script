go.property("speed", 100)
go.property("direction", vmath.vector3(0, 1, 0))
go.property("damage", 10)

local active_sounds = 0
local max_sounds = 5 -- Ajusta según sea necesario


function init(self)
    self.speed = self.speed or 200 -- Velocidad por defecto
    self.direction = self.direction or vmath.vector3(0, 0, 0) -- Dirección por defecto
    self.damage = self.damage or 10 -- Daño por defecto
    -- Play el sonido
    --play_shoot_sound()
	--print("ID del proyectil: ", go.get_id())
	--print("Velocidad del proyectil: ", self.speed)
	--print("Direccion del proyectil: ", self.direction)
end

function update(self, dt)
    local position = go.get_position()
    position = position + self.direction * self.speed * dt
    position.z = 1
    go.set_position(position)

    -- Eliminar el proyectil si sale de la pantalla
    if position.y > 720 or position.y < 0 or position.x < 0 or position.x > 480 then
        go.delete()
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("collision_response") then
        -- Manejar colisiones (por ejemplo, daño a enemigos)
        go.delete()
    end
    if message_id == hash("contact_point_response") then
        -- Verifica si el objeto con el que colisionó es un enemigo
        if message.other_group == hash("enemy") then
            -- Envía el mensaje "take_damage" al script del enemigo
            msg.post(message.other_id, "take_damage", { amount = self.damage })
            -- Opcional: Destruye la bala
            go.delete()
        end
    end
    if message_id == hash("play_shoot_sound") then
        sound.play("#sound_fire")
    end
end

function play_shoot_sound()
    if active_sounds < max_sounds then
        sound.play("#sound_fire", {},  function() 
            active_sounds = active_sounds - 1
        end)
        active_sounds = active_sounds + 1
    end
end