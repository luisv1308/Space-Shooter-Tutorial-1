-- Supongamos que en el init del boss ya definiste:
function init(self)
    self.hp = 50
    self.attack_timer = 0
    self.is_alive = true
    self.oscillation_factor = 0
    self.state = "entering"
    self.start_position = vmath.vector3(240, 700, 0)
    self.target_position = vmath.vector3(240, 500, 0)
    go.set_position(self.start_position)

    -- Animaci칩n de entrada del boss
    go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.target_position, go.EASING_INOUTQUAD, 2, 0, function()
        self.state = "normal"
        self.oscillation_factor = 0
    end)

    self.current_pattern = "independent"  -- patr칩n que usaremos en este ejemplo
    self.oscillation_amplitude = 50
    self.oscillation_speed = 2
    self.time = 0

    self.desperate_factor = 1
    self.desperate_transition_time = 2

    -- Definici칩n de los offsets para cada ca침칩n
    self.cannon_offsets = {
        central = vmath.vector3(0, -30, 0),    -- ca침칩n central
        left = vmath.vector3(-20, -30, 0),      -- ca침칩n izquierdo
        right = vmath.vector3(20, -30, 0)        -- ca침칩n derecho
    }
end

-- Funci칩n de actualizaci칩n
function update(self, dt)
    if not self.is_alive then 
        return 
    end

    self.time = self.time + dt

    if self.hp <= 20 and self.state ~= "desperate" then
        self.state = "desperate"
        self.desperate_factor = 1
    end

    if self.state == "normal" then
        if self.oscillation_factor < 1 then
            self.oscillation_factor = math.min(1, self.oscillation_factor + dt / 2)
        end
        move_normal(self, dt)
    elseif self.state == "desperate" then
        if self.desperate_factor < 1.5 then
            self.desperate_factor = math.min(1.5, self.desperate_factor + dt / self.desperate_transition_time)
        end
        move_desperate(self, dt)
    end

    self.attack_timer = self.attack_timer + dt
    if self.attack_timer >= 5 and self.hp > 0 then
        shoot_independent(self)
        self.attack_timer = 0
    end
end

-- Movimiento normal (oscilaci칩n suave)
function move_normal(self, dt)
    local base_pos = self.target_position
    local offset = self.oscillation_amplitude * self.oscillation_factor * math.sin(self.time * self.oscillation_speed)
    local new_pos = vmath.vector3(base_pos.x + offset, base_pos.y, base_pos.z)
    go.set_position(new_pos)
end

-- Movimiento desesperado (con mayor amplitud y un leve temblor vertical)
function move_desperate(self, dt)
    local base_pos = self.target_position
    local amplitude = self.oscillation_amplitude * self.desperate_factor
    local speed = self.oscillation_speed * self.desperate_factor
    local offset = amplitude * self.oscillation_factor * math.sin(self.time * speed)
    local vertical_offset = 10 * self.desperate_factor * math.sin(self.time * 10)
    local new_pos = vmath.vector3(base_pos.x + offset, base_pos.y + vertical_offset, base_pos.z)
    go.set_position(new_pos)
end

-- -- Funci칩n de disparo independiente: cada ca침칩n dispara un patr칩n distinto
-- function shoot_independent(self)
--     local boss_pos = go.get_position()
--     -- Define los retrasos (en segundos) para cada ca침칩n
--     local delays = {
--         central = 0,   -- dispara inmediatamente
--         left = 1.5,    -- dispara 0.5 segundos despu칠s
--         right = 1.5    -- dispara 1.5 segundos despu칠s
--     }

--     for cannon, offset in pairs(self.cannon_offsets) do
		
--         local spawn_position = boss_pos + offset
--         local delay = delays[cannon] or 0  -- en caso de que no est칠 definido, se usa 0

--         timer.delay(delay, false, function()
-- 			if self.hp <= 0 then
-- 				return
-- 			end
-- 			boss_pos = go.get_position()
-- 			spawn_position = boss_pos + offset
--             if cannon == "central" then
--                 -- Disparo recto: un 칰nico proyectil hacia abajo
--                 spread_shot(self, spawn_position)

--             elseif cannon == "left" then
--                 -- Disparo en abanico desde el ca침칩n izquierdo: tres proyectiles en 치ngulos distintos
-- 				burst_shoot(self, spawn_position, offset)

--             elseif cannon == "right" then
--                 -- Disparo en r치faga desde el ca침칩n derecho: 3 proyectiles en secuencia r치pida
--                 burst_shoot(self, spawn_position, offset)
--             end
--         end)
--     end
-- end

function shoot_independent(self)
    local boss_pos = go.get_position()
    local central_offset = self.cannon_offsets.central or vmath.vector3(0, -20, 0) -- Ajusta seg칰n la posici칩n del l치ser
    local spawn_position = boss_pos + central_offset

    -- Solo disparamos desde el ca침칩n central
    timer.delay(0, false, function()
        if self.hp <= 0 then
            return
        end
        boss_pos = go.get_position()
        spawn_position = boss_pos + central_offset
        fire_laser(self, spawn_position) -- Funci칩n para disparar el l치ser
    end)
end

function fire_laser(self, spawn_position)
    if self.laser_id then
        msg.post(self.laser_id, "destroy")  -- Eliminar el l치ser anterior si existe
    end

    self.laser_id = factory.create("#projectile_factory", spawn_position)

    -- 游릭 Decirle al l치ser que siga al jefe
    msg.post(self.laser_id, "set_boss", { boss_id = go.get_id() })
end




function central_shot(self, spawn_position)
	factory.create("#projectile_factory", spawn_position)
end

function spread_shot(self, spawn_position)
	-- Disparo en abanico desde el ca침칩n izquierdo: tres proyectiles en 치ngulos distintos
	local angles = {-30, 0, 20}  -- 치ngulos en grados
	for i, angle in ipairs(angles) do
		local rad = math.rad(angle)
		local direction = vmath.vector3(math.sin(rad), -math.cos(rad), 0)
		factory.create("#projectile_factory", spawn_position, nil, { direction = direction })
	end
end

function burst_shoot(self, spawn_position, offset)
	for i = 1, 3 do
		timer.delay(0.1 * i, false, function()
			boss_pos = go.get_position()
			spawn_position = boss_pos + offset
			factory.create("#projectile_factory", spawn_position)
		end)
	end
end


-- Funci칩n de manejo de mensajes para recibir da침o
function on_message(self, message_id, message, sender)
    if message_id == hash("take_damage") then
        self.hp = self.hp - message.amount
        if self.hp <= 0 then
            -- Desactivar colisi칩n
            msg.post("#collisionobject", "disable")
            die(self)
        end
    end
end

-- Funci칩n de muerte del boss
function die(self)
    -- Destruir laser 
    if self.laser_id then
        msg.post(self.laser_id, "destroy")  -- Eliminar el l치ser anterior si existe
    end
    -- Enviar mensaje a game manager para actualizar score
    msg.post(msg.url("main:/game_manager"), "add_score", { points = 100 })

    local explosions = {
        { offset = vmath.vector3(0, -20, 0), timer = 1.5 },
        { offset = vmath.vector3(-50, 0, 0), timer = 1.8, scale = vmath.vector3(12.5, 12.5, 0.5),  volume = 0.2 },
        { offset = vmath.vector3(50, 0, 0), timer = 1.8, scale = vmath.vector3(12.5, 12.5, 0.5), volume = 0.2 }
    }
    
    for i, explosion in ipairs(explosions) do
        local pos = go.get_position() + explosion.offset
        local props = {
            enemy = self.url,
            animation = hash("explotion_purple"),
            timer = explosion.timer
        }
        if explosion.scale then
            props.scale = explosion.scale
        end
        if explosion.volume then
            props.volume = explosion.volume
        end
        factory.create("#explosion_factory" .. tostring(i-1), pos, nil, props)
    end
    
    self.is_alive = false

    -- Desactivar control del jugador
    msg.post("player", "disable_control")

    -- Hacer que la nave salga r치pidamente
    msg.post("player", "warp_out")
    
    go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0,0,0), go.EASING_INOUTQUAD, 1.5, 0, function()
        -- Enviar mensaje a dialogo
        msg.post("/dialogue_gui#dialogue", "start_dialogue", { text = "Level cleared! Well done!", speed = 0.05, texture = "friend_robot" })
        -- Esperar 3 segundos y enviar mensaje de cargar nuevo nivel
        timer.delay(3.0, false, function()
            go.delete()
        end)
    end)
end
