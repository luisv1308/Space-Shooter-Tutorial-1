local Config = require "main/config"
local enemy_info_manager = require "main/scripts/managers/enemy_info_manager"
local Utilities = require "main/scripts/utilities"
local SMALL_ASTEROID_FACTORY = "#small_asteroid_factory"
local asteroids = {}
local small_asteroids = {}

go.property("level", 1)
-- enemy_manager.script
function init(self)
    print("Enemy manager initialized")
    self.enemies = {} -- Lista para almacenar enemigos activos
    self.spawn_timer = 0
    self.current_level = self.level or 1
    self.formation_index = 1
    self.spawn_formations = {}
    self.counter = 0
    -- Asteroides
    self.asteroids_total = 1
    self.asteroids_timer = 0 -- Temporizador inicial
    self.asteroids_interval = 10 -- Intervalo en segundos

    -- Cargar niveles de enemigos
    load_level_formations(self, self.current_level)

    self.stop_spawning = false

end

function update(self, dt)
    self.spawn_timer = self.spawn_timer + dt
    local formations_count = #self.spawn_formations
    
    if self.spawn_timer >= Config.enemies.spawn_time and self.counter < formations_count and not self.stop_spawning then -- Cada 5 segundos
        --self.spawn_formations = Utilities:shuffle_table(self.spawn_formations)

        local formation = self.spawn_formations[self.formation_index]
        -- Checar si es un tipo jefe
        if formation.enemy_type == hash("boss") then
            -- Crear objeto warning
            factory.create("/warning#factory_warning", vmath.vector3(0, 0, 0), nil, { level = self.current_level, timer = 5 })
            -- Detener la musica de fondo
            msg.post("/music#music_background", "stop_sound")
            -- Reproducir warning luego la musica de jefe
            msg.post("/music#music_warning", "play_sound")
            -- Esperar 5 segundos
            local boss_name = formation.boss_name
            timer.delay(5, false, function()
                -- Parar musica warning
                msg.post("/music#music_warning", "stop_sound")
                -- Reproducir musica de jefe
                msg.post("/music#music_boss", "play_sound")
                -- Llamar el factory boss para crear el jefe
                spawn_boss(self, boss_name)
            end)
            -- Remover de la lista de formaciones
            table.remove(self.spawn_formations, self.formation_index)
            -- Set formation null
            formation = nil -- para que se salte el siguiente if
            return
        end
        -- Checar si es un evento de dialogo 
        if formation.type == "dialogue_event" then
            -- Enviar mensaje a dialogue
            msg.post("/dialogue_gui#dialogue", "start_dialogue", { text = formation.text, speed = formation.speed
            , texture = formation.texture })
            -- Remover de la lista de formaciones
            table.remove(self.spawn_formations, self.formation_index)
            -- Set formation null
            formation = nil
            return
        end
        if formation then
            spawn_enemies_formations(self, formation.type, formation.count, 
                self.current_level, formation.movement_pattern, formation.enemy_type, formation.powerup
            )
           
            if formation.other ~= nil then
                spawn_enemies_formations(self, formation.other.type, formation.other.count, 
                    self.current_level, formation.other.movement_pattern, formation.other.enemy_type
                )
            end
            self.formation_index = self.formation_index % #self.spawn_formations + 1
            -- Remover de la lista de formaciones
            table.remove(self.spawn_formations, self.formation_index)
            -- Set formation null
            formation = nil
        end
        self.spawn_timer = 0
        self.counter = self.counter + 1
        
    end

    -- Lanzar asteroides
    if self.asteroids_total > 0 and not self.stop_spawning then
        spawn_asteroids(self, self.current_level)
        self.asteroids_total = self.asteroids_total - 1
    end

    -- Temporizador asteroides
    -- Incrementar el temporizador
    self.asteroids_timer = self.asteroids_timer + dt

    -- Verificar si ha pasado el intervalo
    if self.asteroids_timer >= self.asteroids_interval then
        self.asteroids_timer = self.asteroids_timer - self.asteroids_interval -- Reiniciar el temporizador
        self.asteroids_total = self.asteroids_total + 1 -- Cambiar la variable
        --print("Variable actual:", self.asteroids_total)
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("remove_enemy") then
        --print("Enemigo removido", message.enemy)
        remove_enemy(self, message.enemy)
    end
    -- Remover asteroide largo
    if message_id == hash("remove_large_asteroid") then
        remove_large_asteroid(self, message.enemy)
    end
    -- Remover asteroide pequeño
    if message_id == hash("remove_small_asteroid") then
        remove_small_asteroid(self, message.enemy)
    end
    if message_id == hash("level_cleared") then
        self.current_level = self.current_level + 1
        load_level_formations(self, self.current_level)
    end
    if message_id == hash("current_level") then
        -- El nivel actual se encuentra en message.level
        --print("Nivel actual recibido:", message.level)
        -- Puedes guardar el nivel o realizar alguna acción específica
        self.current_level = message.level
    end
    if message_id == hash("create_small_asteroids") then
        -- Crear asteroides pequeños
        create_small_asteroids(self, message.position, message.count)
    end
    -- Borrar todos los enemigos
    if message_id == hash("clear_enemies") then
        clear_all_enemies(self)
        clear_all_asteroids(self)
    end
    -- Parar la generación de enemigos
    if message_id == hash("stop_spawning") then
        self.stop_spawning = true
    end
end

function spawn_boss(self, boss_name)
    local boss = factory.create("#factory_boss", vmath.vector3(240, 360, 0), nil, {
        boss_name = boss_name
    })
    --table.insert(self.enemies, boss)
    --enemy_info_manager.add_enemy(boss)
end
function spawn_enemies_formations(self, formation_type, count, level, movement_pattern, enemy_type, powerup)
    local spacing_x = 40 -- Espaciado horizontal
    local spacing_y = 40 -- Espaciado vertical
    local formation_radius = 100 -- Radio para formaciones circulares
    local screen_width = 480
    local screen_height = 640

    for i = 0, count do
        local x, y

        if formation_type == "line_horizontal" then
            x = 80 + (i - 1) * spacing_x
            y = screen_height + 10

        elseif formation_type == "line_vertical" then
            x = screen_width / 2
            y = screen_height + 10 - (i - 1) * spacing_y

        elseif formation_type == "circle" then
            local angle_step = (2 * math.pi) / count
            local angle = (i - 1) * angle_step
            x = screen_width / 2 + math.cos(angle) * formation_radius
            y = screen_height + 450  + math.sin(angle) * formation_radius

        elseif formation_type == "triangle" then
            local row = math.floor((math.sqrt(8 * i + 1) - 1) / 2)
            local col = i - (row * (row + 1)) / 2
            x = screen_width / 2 + (col - row / 2) * spacing_x
            y = screen_height + 200 - row * spacing_y

        elseif formation_type == "zigzag" then
            local direction = ((math.floor((i - 1) / 2) % 2) == 0) and 1 or -1
            x = 240 + direction * ((i - 1) % 2) * spacing_x
            y = 650 + math.floor((i - 1) / 2) * spacing_y

        elseif formation_type == "diagonal" then
            x = 40 + (i - 1) * spacing_x
            y = screen_height + 10 - (i - 1) * spacing_y

        elseif formation_type == "rectangle_left" then
            if i == 0 then
                i = i + 1
            end
            local cols = 4
            local row = math.floor((i - 1) / cols)
            local col = (i - 1) % cols
            x = 40 + col * spacing_x
            y = screen_height + 10 - row * spacing_y
        elseif formation_type == "rectangle_right" then
            if i == 0 then
                i = i + 1
            end
            local cols = 4
            local row = math.floor((i - 1) / cols)
            local col = (i - 1) % cols
            x = 440 - col * spacing_x
            y = screen_height + 10 - row * spacing_y
        elseif formation_type == "rectangle_center" then
            if i == 0 then
                i = i + 1
            end
            local cols = 4
            local row = math.floor((i - 1) / cols)
            local col = (i - 1) % cols
            x = screen_width / 2 - col * spacing_x
            y = screen_height + 10 - row * spacing_y  
        elseif formation_type == "random" then
            x = math.random(40, screen_width - 40)
            y = math.random(screen_height + 50, screen_height + 100)

        elseif formation_type == "h_formation" then
            local mid = math.ceil(count / 2)
            local offset = math.abs(i - mid)
            x = screen_width / 2 + offset * spacing_x * (i > mid and 1 or -1)
            y = screen_height + 460 - (i - mid) * spacing_y

        elseif formation_type == "v_formation" then
            local mid = math.ceil(count / 2)
            local offset = math.abs(i - mid)
            x = screen_width / 2 + (i - mid) * spacing_x
            y = screen_height + 350 - offset * spacing_y
        elseif formation_type == "outside_diagonal_left" then
            -- x fuera de la pantalla a la izquierda
            x = -100
            y = screen_height + 0 - (i - 1) * spacing_y
        -- Nueva formación: Doble columna
        elseif formation_type == "outside_diagonal_right" then
            -- x fuera de la pantalla a la derecha
            x = screen_width + 100
            y = screen_height + 10 - (i - 1) * spacing_y
        elseif formation_type == "double_column" then
            if i == 0 then
                i = i + 1
            end
            local cols = 2
            local row = math.floor((i - 1) / cols)
            local col = (i - 1) % cols
            x = 40 + col * spacing_x
            y = screen_height + 200 - row * spacing_y
        elseif formation_type == "side_by_side_right" then
            y = 360 -- Altura inicial (ajusta según tu pantalla)
            x = -200 + (i * spacing_x) -- Fuera del lado izquierdo de la pantalla
        elseif formation_type == "side_by_side_left" then
            y = 360 -- Altura inicial (ajusta según tu pantalla)
            x = screen_width + 300 - (i * spacing_x) -- Fuera del lado derecho de la pantalla
        end
        local powerup_type = nil
        if powerup and powerup.enemy_number == i then
            print("Enemigo", i, "tiene powerup")
            powerup_type = powerup.type
        end
        
        if x and y then
            local enemy = factory.create("#factory_enemy", vmath.vector3(x, y, 0), nil, {
                enemy_type = enemy_type,
                initial_position = vmath.vector3(x, y, 0),
                level = level,
                movement_pattern = movement_pattern,
                powerup_type = powerup_type
            })
            table.insert(self.enemies, enemy)
            enemy_info_manager.add_enemy(enemy)
        end
    end
end

function spawn_asteroids(self, level)
    --print("Spawning asteroids")
    level = level * 2
    for i = 1, level do
        local x = math.random(40, Config.screen_width - 40)
        local y = math.random(Config.screen_height + 50, Config.screen_height + 100)
        local asteroid_id  = factory.create("#factory_asteroid", vmath.vector3(x, y, 0), nil, {
    
        })
        asteroids[asteroid_id] = "asteroid" .. i
        --table.insert(self.enemies, asteroid_id )
        --enemy_info_manager.add_enemy(asteroid_id )
    end
end

function create_small_asteroids(self, position, count)
    for i = 1, count do
        -- Generar asteroides pequeños en posiciones aleatorias cercanas
        local offset = vmath.vector3(math.random(-10, 10), math.random(-10, 10), 0)
        local asteroid_id = factory.create(SMALL_ASTEROID_FACTORY, position + offset)
        small_asteroids[asteroid_id] = "small_asteroid" .. i
        
    end
end

function remove_enemy(self, enemy_id)
    for i, id in ipairs(self.enemies) do
        if id == enemy_id then
            table.remove(self.enemies, i)
            break
        end
    end
end

function clear_all_enemies(self)
    for _, enemy_id in ipairs(self.enemies) do
        -- Si es nill pasar al siguiente
        if enemy_id and go.exists(enemy_id) then
            go.delete(enemy_id)
        end
    end
    self.enemies = {}
end

function remove_large_asteroid(self, asteroid_id)
    -- Si es nill pasar al siguiente
    if asteroid_id and go.exists(asteroid_id) then
        -- Enviar mensaje de destrucción al asteroide
        asteroids[asteroid_id] = nil
    end
    
end

function remove_small_asteroid(self, asteroid_id)
    -- Si es nill pasar al siguiente
    if asteroid_id and go.exists(asteroid_id) then
        -- Enviar mensaje de destrucción al asteroide
        small_asteroids[asteroid_id] = nil
    end
    
end


function clear_all_asteroids(self)
    for key, asteroid_id in pairs(asteroids) do
        -- Si es nil, pasar al siguiente
        if asteroid_id and go.exists(key) then
            -- Enviar mensaje de destrucción al asteroide
            msg.post(key, "die")
        end
    end
    
    -- Eliminar small_asteroids 
    for key, asteroid_id in pairs(small_asteroids) do
        -- Si es nil, pasar al siguiente
        if asteroid_id and go.exists(key) then
            -- Enviar mensaje de destrucción al asteroide
            msg.post(key, "die")
        end
    end
    
    -- Limpiar tablas
    asteroids = {}
    small_asteroids = {}
end     
