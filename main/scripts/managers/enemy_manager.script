local enemy_info_manager = require "main/scripts/managers/enemy_info_manager"
local Utilities = require "main/scripts/utilities"

-- enemy_manager.script
function init(self)
    print("Enemy manager initialized")
    self.enemies = {} -- Lista para almacenar enemigos activos
    self.spawn_timer = 0
    self.current_level = 1
    self.formation_index = 1
    self.spawn_formations = {}
    -- Cargar niveles de enemigos
    load_level_formations(self, self.current_level)
end

function update(self, dt)
    self.spawn_timer = self.spawn_timer + dt
    if self.spawn_timer >= 5 then -- Cada 5 segundos
        self.spawn_formations = Utilities:shuffle_table(self.spawn_formations)
        local formation = self.spawn_formations[self.formation_index]
        if formation then
            spawn_enemies_formations(self, formation.type, formation.count, 
                self.current_level, formation.movement_pattern
            )
            self.formation_index = self.formation_index % #self.spawn_formations + 1
        end
        self.spawn_timer = 0
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("remove_enemy") then
        print("Enemigo removido")
        remove_enemy(self, message.enemy_id)
    end
    if message_id == hash("level_cleared") then
        self.current_level = self.current_level + 1
        load_level_formations(self, self.current_level)
    end
    if message_id == hash("current_level") then
        -- El nivel actual se encuentra en message.level
        print("Nivel actual recibido:", message.level)
        -- Puedes guardar el nivel o realizar alguna acción específica
        self.current_level = message.level
    end
end

function spawn_enemies_formations(self, formation_type, count, level, movement_pattern, enemy_type)
    local spacing_x = 40 -- Espaciado horizontal
    local spacing_y = 40 -- Espaciado vertical
    local formation_radius = 100 -- Radio para formaciones circulares
    local screen_width = 480
    local screen_height = 640

    for i = 0, count do
        local x, y

        if formation_type == "line_horizontal" then
            x = 80 + (i - 1) * spacing_x
            y = screen_height + 10

        elseif formation_type == "line_vertical" then
            x = screen_width / 2
            y = screen_height + 10 - (i - 1) * spacing_y

        elseif formation_type == "circle" then
            local angle_step = (2 * math.pi) / count
            local angle = (i - 1) * angle_step
            x = screen_width / 2 + math.cos(angle) * formation_radius
            y = screen_height + 450  + math.sin(angle) * formation_radius

        elseif formation_type == "triangle" then
            local row = math.floor((math.sqrt(8 * i + 1) - 1) / 2)
            local col = i - (row * (row + 1)) / 2
            x = screen_width / 2 + (col - row / 2) * spacing_x
            y = screen_height + 200 - row * spacing_y

        elseif formation_type == "zigzag" then
            local direction = ((math.floor((i - 1) / 2) % 2) == 0) and 1 or -1
            x = 240 + direction * ((i - 1) % 2) * spacing_x
            y = 650 + math.floor((i - 1) / 2) * spacing_y

        elseif formation_type == "diagonal" then
            x = 40 + (i - 1) * spacing_x
            y = screen_height + 10 - (i - 1) * spacing_y

        elseif formation_type == "rectangle_left" then
            if i == 0 then
                i = i + 1
            end
            local cols = 4
            local row = math.floor((i - 1) / cols)
            local col = (i - 1) % cols
            x = 40 + col * spacing_x
            y = screen_height + 10 - row * spacing_y
        elseif formation_type == "rectangle_right" then
            if i == 0 then
                i = i + 1
            end
            local cols = 4
            local row = math.floor((i - 1) / cols)
            local col = (i - 1) % cols
            x = 440 - col * spacing_x
            y = screen_height + 10 - row * spacing_y
        elseif formation_type == "rectangle_center" then
            if i == 0 then
                i = i + 1
            end
            local cols = 4
            local row = math.floor((i - 1) / cols)
            local col = (i - 1) % cols
            x = screen_width / 2 - col * spacing_x
            y = screen_height + 10 - row * spacing_y  
        elseif formation_type == "random" then
            x = math.random(40, screen_width - 40)
            y = math.random(screen_height + 50, screen_height + 100)

        elseif formation_type == "h_formation" then
            local mid = math.ceil(count / 2)
            local offset = math.abs(i - mid)
            x = screen_width / 2 + offset * spacing_x * (i > mid and 1 or -1)
            y = screen_height + 10 - (i - mid) * spacing_y

        elseif formation_type == "v_formation" then
            local mid = math.ceil(count / 2)
            local offset = math.abs(i - mid)
            x = screen_width / 2 + (i - mid) * spacing_x
            y = screen_height + 10 - offset * spacing_y
        elseif formation_type == "outside_diagonal_left" then
            -- x fuera de la pantalla a la izquierda
            x = -100
            y = screen_height + 10 - (i - 1) * spacing_y
        -- Nueva formación: Doble columna
        elseif formation_type == "outside_diagonal_right" then
            -- x fuera de la pantalla a la derecha
            x = screen_width + 100
            y = screen_height + 10 - (i - 1) * spacing_y
        elseif formation_type == "double_column" then
            if i == 0 then
                i = i + 1
            end
            local cols = 2
            local row = math.floor((i - 1) / cols)
            local col = (i - 1) % cols
            x = 40 + col * spacing_x
            y = screen_height + 200 - row * spacing_y
           
        end

        if x and y then
            local enemy = factory.create("#factory_enemy", vmath.vector3(x, y, 0), nil, {
                enemy_type = enemy_type,
                initial_position = vmath.vector3(x, y, 0),
                level = level,
                movement_pattern = movement_pattern
            })
            table.insert(self.enemies, enemy)
            enemy_info_manager.add_enemy(enemy)
        end
    end
end

function remove_enemy(self, enemy_id)
    for i, id in ipairs(self.enemies) do
        if id == enemy_id then
            table.remove(self.enemies, i)
            break
        end
    end
end

function clear_all_enemies(self)
    for _, enemy_id in ipairs(self.enemies) do
        go.delete(enemy_id)
    end
    self.enemies = {}
end
