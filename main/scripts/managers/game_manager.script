local Config = require "main/config"

-- game_manager.script
local formations_data  = require "main/scripts/formations"
local dispatcher = require "main/scripts/dispatcher"
local score = 0 -- Variable de puntaje
local lives = 0
local health = 0
local starting_game = true
local current_level = 0
local is_menu = true
local LEVEL_DATA = {
    { enemy_count = 5, proxy = "/level1#proxy" },
    { enemy_count = 10, proxy = "/level2#proxy" },
    { enemy_count = 15, proxy = "/level3#proxy" }
}


-- speed of the time in the collection proxy
go.property("speed", 1)

function init(self)
    -- Limpiar datos de score y lives en game_data
    sys.save("game_data", { score = 0, lives = 0, health = 0 })

    self.current_level_proxy = nil -- Declaramos explícitamente esta variable
    self.loading = false -- Para evitar cargar niveles mientras otro se está cargando
    -- Debugging para cargar rapido sin menu
    if Config.debug then
        disabled_menu_gui(self)
        current_level = 1
        is_menu = false
        load_level(self, current_level)
    else
        disabled_gui(self)
        load_menu(self)
    end

    --load_menu(self)
    --load_level(self, current_level)
    --load_level_formations(self, self.current_level)
    --msg.post("@broadcast", "current_level", { level = self.current_level })
    --msg.post("/level1/enemy_manager", "spawn_enemies", { level = self.current_level })
end

function update(self, dt)
    -- Aquí puedes manejar transiciones de nivel, puntajes, etc.
    -- update the time step of the proxy each frame since it might be animated
    if current_level > 0 then
        msg.post(LEVEL_DATA[current_level].proxy, "set_time_step", { factor = self.speed, mode = 0 })
    end
end

function on_message(self, message_id, message, sender)
    -- Start game 
    if message_id == hash("start_game") then
        -- Esperar dos segundos y borrar menu gui
        timer.delay(4.0, false, function()
            msg.post("/menu_gui", "disable")
            -- Esperar un segundo y mostrar gui
            timer.delay(1.0, false, function()
                enabled_gui(self)
            end)
        end)
        starting_game = true
        current_level = 1
        -- Cargar el nivel 1 y unload actual 
        msg.post("/menu#proxy", "disable")
        msg.post("/menu#proxy", "final")
        msg.post("/menu#proxy", "unload")
        -- Esperar 3 segundos y cargar nivel
        timer.delay(3.0, false, function()
            --current_level = current_level + 1
            load_level(self, current_level)
        end)        
    end
    if message_id == hash("level_cleared") then
        --current_level = current_level + 1
        if current_level <= #LEVEL_DATA then
            self.loading = false
            unload_level(self, current_level)
        else
            print("¡Juego completado!")
        end
    elseif message_id == hash("proxy_loaded") then
        -- Activar la colección del nivel cargado
        msg.post(sender, "init")
        msg.post(sender, "enable")
        self.loading = false
        -- Guardar la URL base del nivel cargado
        self.current_level_base = msg.url(sender)
        -- checar si es menu 
        if is_menu then
            
            is_menu = false
            
        else
            -- Esconder menu gui
            --msg.post("/menu_gui", "disable")
        end
        print("Nivel cargado:", self.current_level_base)
        --dispatcher.broadcast(hash("current_level"), { level = self.current_level, base = self.current_level_base.socket })
       -- msg.post("@broadcast", "current_level", { level = self.current_level, base = self.current_level_base.socket })
        print("Nivel cargado y activado:", current_level)
        -- Comenzar countdown enviando mensaje 
        msg.post("/health_gui", "start_countdown", { time = 99 })
        -- Cargar game_data
        local my_table = sys.load("game_data")
        score = my_table.score
        lives = my_table.lives
        health = my_table.health
       
    elseif message_id == hash("proxy_unloaded") then
        print("Proxy unloaded ======", sender)
        -- checar si es menu 
        if is_menu then
            return
        end
        -- Actualizar game_data
        sys.save("game_data", { score = score, lives = lives, health = health })
        -- Checar si aun quedan niveles para cargar
        if starting_game then
            if current_level < #LEVEL_DATA then
                load_level(self, current_level)
            end     
        else
            current_level = current_level + 1
            if current_level < #LEVEL_DATA then
                -- Esperar 3 segundos y cargar nivel
                timer.delay(3.0, false, function()
                    load_level(self, current_level)
                end)
            end 
        end
    end

    if message_id == hash("set_health") then
        health = message.health
        msg.post("/health_gui", "set_health", { health = health, max_health = message.max_health })
    end

    if message_id == hash("set_lives") then
        -- Solo si starting_game es true
        if starting_game then
            lives = message.lives
            msg.post("/lives_gui", "set_lives", { lives = lives })
            starting_game = false
        end
    elseif message_id == hash("update_lives") then
        lives = message.lives
        msg.post("/lives_gui", "set_lives", { lives = lives })
    end

    if message_id == hash("add_score") then
        score = score + message.points
         -- Enviar actualización a la GUI
         msg.post("/score_gui", "update_score", { points = score })
    elseif message_id == hash("get_score") then
        msg.post(sender, "score_value", { points = score }) -- Devolver puntaje
    end

    -- Detener Countdown
    if message_id == hash("stop_countdown") then
        msg.post("/health_gui", "stop_countdown")
    end

    if message_id == hash("player_died") then
        lives = lives - 1
        msg.post("/lives_gui", "update_lives", { lives = lives })

        if lives > 0 then
            msg.post(message.player_url, "respawn", { x = message.x, y = message.y })
        else
            disabled_gui(self)
            -- Parar musica
           -- sound.stop("/game_over_gui#sound_game_over")
            -- Game Over
            msg.post("/game_over_gui", "show_game_over")
             -- 1. Pausar todos los game objects
            go.cancel_animations("#", "speed")
            -- make sure speed never goes below 0
            --self.speed = 0
        end
    end

    -- Cargar menu
    if message_id == hash("load_menu") then
        unload_level(self, current_level)
        -- Esperar 4  segundos y cargar after_game_over
        timer.delay(4.0, false, function()
            after_game_over(self)
        end)
        --current_level = 0
        --load_menu(self)
        --after_game_over(self)
    end

    if message_id == hash("play_sound_effect") then
        local sound_name = message.sound
        if sound_name then
            sound.play(sound_name) -- Reproducir el sonido recibido
        end
    end
end

function load_level_formations(self, level)
    self.spawn_formations = formations_data[level] or {} -- Carga las formaciones del nivel actual
end

function get_spawn_formations(self, level)
    return self.spawn_formations
end

function load_level(self, level)
    if self.loading then
        print("Ya se está cargando un nivel.")
        return
    end
    -- Checar si hay nivel cargado
    if self.current_level_proxy then
        print("Ya hay un nivel cargado.")
        self.loading = false
        unload_level(self, level)
        return
    end

    self.loading = true

    -- Cargar el nivel actual
    local proxy = LEVEL_DATA[level].proxy
    self.current_level_proxy = proxy
    msg.post(proxy, "enabled")
    msg.post(proxy, "load")
    msg.post(proxy, "init")
end

function unload_level(self, level)
    self.loading = true
    if not self.current_level_proxy then
        self.loading = false
        print("No hay nivel cargado.")
        return
    end
    local proxy = LEVEL_DATA[level].proxy
    msg.post(proxy, "disable")
    msg.post(proxy, "final")
    msg.post(proxy, "unload")
    self.loading = false
    self.current_level_proxy = nil
    
end

function load_menu(self)
    if self.loading then
        print("Ya se está cargando un nivel.")
        return
    end

    self.loading = true
    -- Si no hay nivel cargado, cargar directamente el nuevo nivel
    local proxy = "/menu#proxy"
    self.current_level_proxy = proxy
    
    msg.post(proxy, "load")
    msg.post(proxy, "init")
    msg.post(proxy, "enable")
    --msg.post("/game_over_gui", "disable")
    msg.post("/menu_gui", "enable")
    msg.post("/menu_gui", "start_game")
    self.loading = false
end

function enabled_gui(self)
    msg.post("/lives_gui", "enable")
    msg.post("/score_gui", "enable")
    msg.post("/weapon_gui", "enable")
    msg.post("/health_gui", "enable")
end

function disabled_gui(self)
    msg.post("/lives_gui", "disable")
    msg.post("/score_gui", "disable")
    msg.post("/weapon_gui", "disable")
    msg.post("/health_gui", "disable")
end

function disabled_menu_gui(self)
    msg.post("/menu_gui", "disable")
end

function after_game_over(self)
    -- Esconder game_over_gui
    msg.post("/game_over_gui", "hide_game_over")
    starting_game = true
    is_menu = true
    current_level = 0
    -- Desactivar los gui
    disabled_gui(self)
    -- Limpiar datos de score y lives en game_data
    sys.save("game_data", { score = 0, lives = 0, health = 0 })

    --self.current_level_proxy = nil -- Declaramos explícitamente esta variable
    self.loading = false -- Para evitar cargar niveles mientras otro se está cargando
    -- Si no hay nivel cargado, cargar directamente el nuevo nivel
    load_menu(self)
end

function final(self)
    sys.save("game_data", { lives = lives, score = score }) -- Guardar el puntaje al salir
end