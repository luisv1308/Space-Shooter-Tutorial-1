function init(self)
    -- Configura las velocidades para cada capa
    self.layers = {
        { id = go.get_id("bg_far"), speed_y = 160, offset_x = -50, speed_x = 5 },
        { id = go.get_id("bg_mid"), speed_y = 190, offset_x = 30, speed_x = 10 },
        { id = go.get_id("bg_near_1"), speed_y = 220, offset_x = 70, speed_x = 15 },
        { id = go.get_id("bg_near_2"), speed_y = 240, offset_x = 70, speed_x = 15 },
    }
    self.height = 256 * 3.2

    -- Cambia el escalado en el editor o por código
    go.set_scale(vmath.vector3(1, 1, 1), "bg_far")
    go.set_scale(vmath.vector3(1.1, 1.1, 1), "bg_mid")
    go.set_scale(vmath.vector3(1.2, 1.2, 1), "bg_near_1")
    go.set_scale(vmath.vector3(1.2, 1.2, 1), "bg_near_2")

    -- Configura posiciones iniciales desplazadas
    for _, layer in ipairs(self.layers) do
        local initial_pos = vmath.vector3(layer.offset_x or 0, 0, 0)
        go.set_position(initial_pos, layer.id)
    end

    -- Configurar posición inicial para las dos capas cercanas
    go.set_position(vmath.vector3(70, 0, 0), go.get_id("bg_near_1"))
    go.set_position(vmath.vector3(70, self.height, 0), go.get_id("bg_near_2"))
end

function update(self, dt)
    for _, layer in ipairs(self.layers) do
        local pos = go.get_position(layer.id)

        -- Movimiento en Y
        pos.y = pos.y - layer.speed_y * dt
        if pos.y < -self.height then
            pos.y = pos.y + self.height * 2
        end

        

        go.set_position(pos, layer.id)
    end
end

-- Mensajes
function on_message(self, message_id, message, sender)
    if message_id == hash("light_speed") then
        for _, layer in ipairs(self.layers) do
            layer.speed_y = layer.speed_y * 4.1
        end
    end
end
