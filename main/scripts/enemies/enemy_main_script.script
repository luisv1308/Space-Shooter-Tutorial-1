-- enemy.script
local StateMachine = require "main/scripts/state_machine" -- Tu m치quina de estados
local enemy_info_manager = require "main/scripts/managers/enemy_info_manager"
-- Enemigo
local EnemyScout = require "main/scripts/enemies/enemy_scout"

-- Propiedades del enemigo
go.property("enemy_type", hash("scout"))
go.property("initial_position", vmath.vector3(0, 0, 0))
go.property("movement_pattern", hash("linear"))

function init(self)
    --self.target = self.target or nil -- Puede ser el jugador u otro objetivo
	-- Inicializar enemigo por defacto
	if self.enemy_type == hash("scout") then
        local props = {
            id = go.get_id(),
            movement_pattern = self.movement_pattern,
            position = self.initial_position
        }
		self.enemy = EnemyScout:new(props)
	end

    -- Inicializar la m치quina de estados
    init_enemy_state_machine(self)
end

function update(self, dt)
    -- Checar si esta fuera de la pantalla
    if self.enemy:is_out_of_bounds() then
        self.state_machine:set_state("dead")
    end
    -- Actualizar temporizador del disparo
    self.enemy.weapon:update(dt) -- Actualiza el temporizador del arma
    -- Actualizar la m치quina de estados
    self.state_machine:update(dt)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("take_damage") then
        self.enemy.health = self.enemy.health - message.amount
        if self.enemy.health <= 0 then
            self.state_machine:set_state("dead")
        else
            self.state_machine:set_state("damage")
        end
    end
end

function init_enemy_state_machine(self)
    -- Inicializar la m치quina de estados
    self.state_machine = StateMachine.new()

    -- Estado IDLE
    self.state_machine:add_state("idle", {
        enter = function()
            print("Enemigo entrando al estado IDLE")
        end,
        update = function(dt)
            if self.enemy:should_patrol(self) then
                self.state_machine:set_state("patrolling")
            elseif self.enemy:is_player_in_range(self) then
                --self.state_machine:set_state("chasing")
            end
        end,
        exit = function()
            print("Enemigo saliendo del estado IDLE")
        end
    })

    -- Estado PATROLLING
    self.state_machine:add_state("patrolling", {
        enter = function()
            print("Enemigo entrando al estado PATROLLING")
            self.patrol_target = self.enemy:get_next_patrol_point(self)
        end,
        update = function(dt)
            self.enemy:move_towards(self.patrol_target, dt)
            if self.enemy:has_reached_target(self, self.patrol_target) then
                self.patrol_target = self.enemy:get_next_patrol_point(self)
            end
            if self.enemy:is_player_in_range(self) then
                self.state_machine:set_state("chasing")
            end
        end,
        exit = function()
            print("Enemigo saliendo del estado PATROLLING")
        end
    })

    -- Estado CHASING
    self.state_machine:add_state("chasing", {
        enter = function()
            --self.active_enemies = enemy_info_manager.get_active_enemies()
            print("Enemigo entrando al estado CHASING")
        end,
        update = function(dt)
            self.enemy:apply_movement_pattern(dt)
            if self.enemy.movement_pattern ~= hash("hit_and_run") then
                if self.enemy:is_player_in_attack_range(self) then
                    self.state_machine:set_state("attacking")
                end
            end
            if self.enemy:has_reached_target(self.enemy.center_screen) then
                print("Enemigo has reached target")
                self.state_machine:set_state("attacking")
            end
            

            --[[ local player_position = self.enemy:get_player_position()
            self.enemy:move_towards(player_position, dt, self.active_enemies)
            if self.enemy:is_player_in_attack_range(self) then
                self.state_machine:set_state("attacking")
            elseif not self.enemy:is_player_in_range(self) then
                --self.state_machine:set_state("patrolling")
            end ]]
        end,
        exit = function()
            print("Enemigo saliendo del estado CHASING")
        end
    })

    -- Estado ATTACKING
    self.state_machine:add_state("attacking", {
        enter = function()
            print("Enemigo entrando al estado ATTACKING")
            print("Enemigo atacando *************************************", self.enemy.movement_pattern)
            self.enemy:perform_attack()
            self.enemy.attack_timer = 0

        end,
        update = function(dt)
            print("Enemigo atacando TEST *************************************", self.enemy.movement_pattern == hash("hit_and_run"))
            if self.enemy.movement_pattern ~= hash("hit_and_run") then
                print("NO ES HIT AND RUNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN")
                self.enemy:apply_movement_pattern(dt)
            end
            
            self.enemy.attack_timer = self.enemy.attack_timer + dt
            --print("Tiempo de ataque: " .. self.enemy.attack_timer)
            if self.enemy.attack_timer >= self.enemy.attack_cooldown then
                print("Enemigo atacandoRRRRRRRRRRR *************************************")
                self.enemy:perform_attack()
                self.enemy.attack_timer = 0
            end
            if self.enemy.movement_pattern ~= hash("hit_and_run") then
                print("NO ES HIT AND RUNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN *************")
                if not self.enemy:is_player_in_attack_range(self) then
                    if self.enemy:is_player_in_range(self) then
                        self.state_machine:set_state("chasing")
                    else
                        self.state_machine:set_state("chasing")
                    end
                end
            else
                print("ES HIT AND RUNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN *************")
                self.state_machine:set_state("runaway")
            end
        end,
        exit = function()
            print("Enemigo saliendo del estado ATTACKING")
        end
    })

    -- Estado DAMAGE
    self.state_machine:add_state("damage", {
        enter = function()
            print("Enemigo entrando al estado DAMAGE")
            
        end,
        update = function(dt)
            if self.enemy.health > 0 then
                self.state_machine:set_state("chasing")
            end
        end,
        exit = function()
            print("Enemigo saliendo del estado DAMAGE")
        end
    })

    -- Estado RUNAWAY
    self.state_machine:add_state("runaway", {
        enter = function()
            print("Enemigo entrando al estado RUNAWAY")
        end,
        update = function(dt)
            self.enemy:move_to_initial_position(dt)
            -- if self.enemy:has_reached_target(self.enemy.initial_position) then
            --     self.enemy.health = 0
            --     self.state_machine:set_state("dead")
            -- end
        end,
        exit = function()
            print("Enemigo saliendo del estado RUN")
        end
    })

    -- Estado DEAD
    self.state_machine:add_state("dead", {
        enter = function()
            print("Enemigo entrando al estado DEAD")
        end,
        update = function(dt)
            if self.enemy.health <= 0 or self.enemy:is_out_of_bounds() then
                -- Enviar mensaje a enemy manager
                msg.post("enemy_manager", "remove_enemy", { enemy = go.get_id() })
                go.delete()
            end
        end,
        exit = function()
            print("Enemigo saliendo del estado DEAD")
        end
    })

    -- Estado inicial
    self.state_machine:set_state("chasing")
end

function final(self)
    -- Limpieza si es necesario
end
